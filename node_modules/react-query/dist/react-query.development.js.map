{"version":3,"file":"react-query.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/core/subscribable.ts","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/react/QueryClientProvider.tsx","../src/react/QueryErrorResetBoundary.tsx","../src/react/useIsFetching.ts","../src/react/useMutation.ts","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/useQueries.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Query } from './query'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value]\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<TOptions extends QueryOptions<any, any, any>>(\n  arg1: QueryKey | TOptions,\n  arg2?: QueryFunction<any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  let isActive\n\n  if (inactive === false || (active && !inactive)) {\n    isActive = true\n  } else if (active === false || (inactive && !active)) {\n    isActive = false\n  }\n\n  if (typeof isActive === 'boolean' && query.isActive() !== isActive) {\n    return false\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions(\n  queryKey: QueryKey,\n  options?: QueryOptions<any, any>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  const asArray = Array.isArray(queryKey) ? queryKey : [queryKey]\n  return stableValueHash(asArray)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(\n  a: QueryKey,\n  b: QueryKey\n): boolean {\n  return partialDeepEqual(ensureArray(a), ensureArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (onFocus: () => void) => (focused?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((focused?: boolean) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', onFocus, false)\n        window.addEventListener('focus', onFocus, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', onFocus)\n          window.removeEventListener('focus', onFocus)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: () => void) => (online?: boolean) => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        // Listen to online\n        window.addEventListener('online', onOnline, false)\n        window.addEventListener('offline', onOnline, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onOnline)\n          window.removeEventListener('offline', onOnline)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay =\n            typeof retryDelay === 'function'\n              ? retryDelay(this.failureCount, error)\n              : retryDelay\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nclass NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  Updater,\n  ensureArray,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, CancelOptions, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<TQueryFnData, TError, TData> {\n  cache: QueryCache\n  queryKey: QueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<TQueryFnData, TError, TData> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData>\n  queryKey: QueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  onFetch: (context: FetchContext<TQueryFnData, TError, TData>) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n> {\n  queryKey: QueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData>\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData>) {\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(options: QueryOptions<TQueryFnData, TError, TData>): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    // Create query function context\n    const queryKey = ensureArray(this.queryKey)\n    const queryFnContext: QueryFunctionContext = {\n      queryKey,\n      pageParam: undefined,\n    }\n\n    // Create fetch function\n    const fetchFn = () =>\n      this.options.queryFn\n        ? this.options.queryFn(queryFnContext)\n        : Promise.reject('Missing queryFn')\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData> = {\n      fetchOptions,\n      options: this.options,\n      queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: (error: TError | { silent?: boolean }) => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          if (this.cache.config.onError) {\n            this.cache.config.onError(error, this as Query)\n          }\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'queryUpdated', action })\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return { ...this.revertState }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'queryAdded'\n  query: Query<any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'queryRemoved'\n  query: Query<any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'queryUpdated'\n  query: Query<any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any>\n  observer: QueryObserver<any, any, any, any>\n}\n\ninterface NotifyEventObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any>\n  observer: QueryObserver<any, any, any, any>\n}\n\ninterface NotifyEventObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventObserverAdded\n  | NotifyEventObserverRemoved\n  | NotifyEventObserverResultsUpdated\n\ntype QueryCacheListener = (event?: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'queryAdded',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'queryRemoved', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return filters\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        if (this.mutationCache.config.onError) {\n          this.mutationCache.config.onError(\n            error,\n            this.state.variables,\n            this.state.context,\n            this as Mutation<unknown, unknown, unknown, unknown>\n          )\n        }\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type { InfiniteData, QueryFunctionContext, QueryOptions } from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page => {\n            newPageParams = previous\n              ? [param, ...newPageParams]\n              : [...newPageParams, param]\n            return previous ? [page, ...pages] : [...pages, page]\n          })\n\n          if (isCancelable(queryFnResult)) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = queryFnResult.cancel\n          }\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          // Fetch first page\n          promise = fetchPage([], manual, oldPageParams[0])\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const param = manual\n                ? oldPageParams[i]\n                : getNextPageParam(context.options, pages)\n              return fetchPage(pages, manual, param)\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        const finalPromiseAsAny = finalPromise as any\n\n        finalPromiseAsAny.cancel = () => {\n          cancelled = true\n          if (isCancelable(promise)) {\n            promise.cancel()\n          }\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  ResetOptions,\n} from './types'\nimport type { QueryState, SetDataOptions } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { CancelOptions } from './retryer'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void>\n  resetQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: filters.refetchActive ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.fetch())\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    options: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery(options: FetchQueryOptions): Promise<void>\n  prefetchQuery(queryKey: QueryKey, options?: FetchQueryOptions): Promise<void>\n  prefetchQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchQueryOptions\n  ): Promise<void>\n  prefetchQuery(\n    arg1: QueryKey | FetchQueryOptions,\n    arg2?: QueryFunction | FetchQueryOptions,\n    arg3?: FetchQueryOptions\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData\n  >(\n    queryKey: QueryKey,\n    queryFn: QueryFunction<TQueryFnData>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n    arg1: QueryKey | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg2?:\n      | QueryFunction<TQueryFnData>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery(options: FetchInfiniteQueryOptions): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    queryKey: QueryKey,\n    queryFn: QueryFunction,\n    options?: FetchInfiniteQueryOptions\n  ): Promise<void>\n  prefetchInfiniteQuery(\n    arg1: QueryKey | FetchInfiniteQueryOptions,\n    arg2?: QueryFunction | FetchInfiniteQueryOptions,\n    arg3?: FetchInfiniteQueryOptions\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<T extends QueryOptions<any, any, any>>(options?: T): T {\n    if (options?._defaulted) {\n      return options\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as T\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    return defaultedOptions\n  }\n\n  defaultQueryObserverOptions<\n    T extends QueryObserverOptions<any, any, any, any>\n  >(options?: T): T {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { getLogger } from './logger'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private trackedProps!: Array<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = []\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOnReconnect(this.currentQuery, this.options)\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOnWindowFocus(this.currentQuery, this.options)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.refetchInterval !== prevOptions.refetchInterval)\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getOptimisticResult(\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ): QueryObserverResult<TData, TError> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<TQueryFnData, TError, TQueryData>\n      )\n\n    return this.createResult(query, defaultedOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          const typedKey = key as keyof QueryObserverResult\n          if (!this.trackedProps.includes(typedKey)) {\n            this.trackedProps.push(typedKey)\n          }\n          return result[typedKey]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch(\n    options?: RefetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch(options)\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<TQueryFnData, TError, TQueryData>\n      )\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    this.clearRefetchInterval()\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.options.refetchInterval)\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.options.refetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData>,\n    options: QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options.optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === prevResultOptions?.select\n      ) {\n        data = prevResult.data\n      } else {\n        try {\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n        } catch (selectError) {\n          getLogger().error(selectError)\n          error = selectError\n          errorUpdatedAt = Date.now()\n          status = 'error'\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TData>)()\n            : options.placeholderData\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    result: QueryObserverResult,\n    prevResult?: QueryObserverResult\n  ): boolean {\n    if (!prevResult) {\n      return true\n    }\n\n    if (result === prevResult) {\n      return false\n    }\n\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true\n    }\n\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    return Object.keys(result).some(key => {\n      const typedKey = key as keyof QueryObserverResult\n      const changed = result[typedKey] !== prevResult[typedKey]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n      return changed && !isExcluded && (!includedProps || isIncluded)\n    })\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    this.currentResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify if something has changed\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    if (\n      notifyOptions?.listeners !== false &&\n      this.shouldNotifyListeners(this.currentResult, prevResult)\n    ) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<TQueryFnData, TError, TQueryData>\n      )\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client\n          .getQueryCache()\n          .notify({ query: this.currentQuery, type: 'observerResultsUpdated' })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldRefetchOnMount(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    query.state.dataUpdatedAt > 0 &&\n    (options.refetchOnMount === 'always' ||\n      (options.refetchOnMount !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options)\n  )\n}\n\nfunction shouldFetchOnReconnect(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnReconnect === 'always' ||\n      (options.refetchOnReconnect !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnWindowFocus(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnWindowFocus === 'always' ||\n      (options.refetchOnWindowFocus !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any>,\n  prevQuery: Query<any, any>,\n  options: QueryObserverOptions<any, any>,\n  prevOptions: QueryObserverOptions<any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any>,\n  options: QueryObserverOptions<any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n    this.updateObservers(notifyOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return queries.map(options => {\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      return this.getObserver(defaultedOptions).getOptimisticResult(\n        defaultedOptions\n      )\n    })\n  }\n\n  private getObserver(options: QueryObserverOptions): QueryObserver {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n    return (\n      this.observersMap[defaultedOptions.queryHash!] ||\n      new QueryObserver(this.client, defaultedOptions)\n    )\n  }\n\n  private updateObservers(notifyOptions?: NotifyOptions): void {\n    notifyManager.batch(() => {\n      let hasIndexChange = false\n\n      const prevObservers = this.observers\n      const prevOberversMap = this.observersMap\n\n      const newResult: QueryObserverResult[] = []\n      const newObservers: QueryObserver[] = []\n      const newObserversMap: Record<string, QueryObserver> = {}\n\n      this.queries.forEach((options, i) => {\n        const defaultedOptions = this.client.defaultQueryObserverOptions(\n          options\n        )\n        const queryHash = defaultedOptions.queryHash!\n        const observer = this.getObserver(defaultedOptions)\n\n        if (prevOberversMap[queryHash]) {\n          observer.setOptions(defaultedOptions, notifyOptions)\n        }\n\n        if (observer !== prevObservers[i]) {\n          hasIndexChange = true\n        }\n\n        newObservers.push(observer)\n        newResult.push(observer.getCurrentResult())\n        newObserversMap[queryHash] = observer\n      })\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior<TQueryFnData, TError, TData>(),\n    })\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.currentResult = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { QueryClient } from '../core'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nconst defaultContext = React.createContext<QueryClient | undefined>(undefined)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(contextSharing: boolean) {\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = () => {\n  const queryClient = React.useContext(\n    getQueryClientContext(React.useContext(QueryClientSharingContext))\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\nexport interface QueryClientProviderProps {\n  client: QueryClient\n  contextSharing?: boolean\n}\n\nexport const QueryClientProvider: React.FC<QueryClientProviderProps> = ({\n  client,\n  contextSharing = false,\n  children,\n}) => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext(contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n","import React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary: React.FC<QueryErrorResetBoundaryProps> = ({\n  children,\n}) => {\n  const value = React.useMemo(() => createValue(), [])\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryKey } from '../core/types'\nimport { parseFilterArgs, QueryFilters } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\n\nexport function useIsFetching(filters?: QueryFilters): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters\n): number {\n  const mountedRef = React.useRef(false)\n\n  const queryClient = useQueryClient()\n\n  const [filters] = parseFilterArgs(arg1, arg2)\n  const [isFetching, setIsFetching] = React.useState(\n    queryClient.isFetching(filters)\n  )\n\n  const filtersRef = React.useRef(filters)\n  filtersRef.current = filters\n  const isFetchingRef = React.useRef(isFetching)\n  isFetchingRef.current = isFetching\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = queryClient.getQueryCache().subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          const newIsFetching = queryClient.isFetching(filtersRef.current)\n          if (isFetchingRef.current !== newIsFetching) {\n            setIsFetching(newIsFetching)\n          }\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [queryClient])\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { noop, parseMutationArgs } from '../core/utils'\nimport { MutationObserver } from '../core/mutationObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { MutationFunction, MutationKey } from '../core/types'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient()\n\n  const obsRef = React.useRef<MutationObserver<any, any, any, any>>()\n\n  if (!obsRef.current) {\n    obsRef.current = new MutationObserver(queryClient, options)\n  } else {\n    obsRef.current.setOptions(options)\n  }\n\n  const currentResult = obsRef.current.getCurrentResult()\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = obsRef.current!.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [])\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >((variables, mutateOptions) => {\n    obsRef.current!.mutate(variables, mutateOptions).catch(noop)\n  }, [])\n\n  if (currentResult.error && obsRef.current.options.useErrorBoundary) {\n    throw currentResult.error\n  }\n\n  return { ...currentResult, mutate, mutateAsync: currentResult.mutate }\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryObserver } from '../core/queryObserver'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\n\nexport function useBaseQuery<TQueryFnData, TError, TData, TQueryData>(\n  options: UseBaseQueryOptions<TQueryFnData, TError, TData, TQueryData>,\n  Observer: typeof QueryObserver\n) {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const queryClient = useQueryClient()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions.optimisticResults = true\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  const obsRef = React.useRef<QueryObserver<any, any>>()\n\n  if (!obsRef.current) {\n    obsRef.current = new Observer(queryClient, defaultedOptions)\n  }\n\n  let result = obsRef.current.getOptimisticResult(defaultedOptions)\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    errorResetBoundary.clearReset()\n\n    const unsubscribe = obsRef.current!.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n\n    // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n    obsRef.current!.updateResult()\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [errorResetBoundary])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current!.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions])\n\n  // Handle suspense\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw obsRef.current\n      .fetchOptimistic(defaultedOptions)\n      .then(({ data }) => {\n        defaultedOptions.onSuccess?.(data)\n        defaultedOptions.onSettled?.(data, null)\n      })\n      .catch(error => {\n        errorResetBoundary.clearReset()\n        defaultedOptions.onError?.(error)\n        defaultedOptions.onSettled?.(undefined, error)\n      })\n  }\n\n  // Handle error boundary\n  if (\n    (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) &&\n    result.isError\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = obsRef.current.trackResult(result)\n  }\n\n  return result\n}\n","import { QueryObserver } from '../core'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError>\nexport function useQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData>\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueriesObserver } from '../core/queriesObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\n\nexport function useQueries(queries: UseQueryOptions[]): UseQueryResult[] {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const queryClient = useQueryClient()\n\n  const defaultedQueries = queries.map(options => {\n    const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n    // Make sure the results are already in fetching state before subscribing or updating options\n    defaultedOptions.optimisticResults = true\n\n    return defaultedOptions\n  })\n\n  const obsRef = React.useRef<QueriesObserver>()\n\n  if (!obsRef.current) {\n    obsRef.current = new QueriesObserver(queryClient, defaultedQueries)\n  }\n\n  const result = obsRef.current.getOptimisticResult(defaultedQueries)\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = obsRef.current!.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    obsRef.current!.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries])\n\n  return result\n}\n","import { QueryObserver } from '../core'\nimport { InfiniteQueryObserver } from '../core/infiniteQueryObserver'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  options: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData\n>(\n  queryKey: QueryKey,\n  queryFn: QueryFunction<TQueryFnData>,\n  options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData>(\n  arg1: QueryKey | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg2?:\n    | QueryFunction<TQueryFnData>\n    | UseInfiniteQueryOptions<TQueryFnData, TError, TData>,\n  arg3?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Subscribable","listeners","subscribe","listener","callback","undefined","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","_extends","assign","target","i","arguments","source","key","hasOwnProperty","call","apply","isServer","window","noop","functionalUpdate","updater","input","isValidTimeout","value","Infinity","ensureArray","Array","isArray","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","matchQuery","filters","query","active","exact","fetching","inactive","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","isFetching","hashFn","queryKeyHashFn","hashQueryKey","asArray","stableValueHash","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","aSize","bItems","bSize","equalItems","shallowEqualObjects","o","hasObjectPrototype","ctor","prot","toString","isError","Error","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","then","catch","error","FocusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","includes","visibilityState","addEventListener","focusManager","OnlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelRetry","cancelFn","continueFn","promiseResolve","promiseReject","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","retry","retryDelay","delay","shouldRetry","onFail","NotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","notifyManager","logger","console","warn","log","getLogger","setLogger","newLogger","Query","defaultOptions","setOptions","observers","cache","initialState","state","getDefaultState","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","prevData","data","isDataEqual","structuralSharing","dispatch","type","dataUpdatedAt","setState","setStateOptions","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","cancelRefetch","queryFnContext","pageParam","fetchFn","context","behavior","onFetch","revertState","fetchMeta","meta","action","reducer","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","status","QueryCache","queries","queriesMap","build","client","get","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","onMutationUpdate","MutationCache","mutations","mutation","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","fetchPage","manual","param","previous","queryFnResult","page","promiseAsAny","getNextPageParam","getPreviousPageParam","finalPromise","finalPromiseAsAny","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","getQueryData","setQueryData","parsedOptions","defaultedOptions","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","map","all","invalidateQueries","refetchActive","refetchInactive","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","getMutationCache","getQueryCache","getDefaultOptions","setQueryDefaults","setMutationDefaults","_defaulted","defaultQueryObserverOptions","QueryObserver","trackedProps","bindMethods","bind","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","clearTimers","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","refetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","defineProperty","configurable","enumerable","typedKey","getNextResult","unsubscribe","getCurrentQuery","fetchOptimistic","clearStaleTimeout","time","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectError","placeholderData","isLoading","isIdle","isFetched","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","changed","isIncluded","isExcluded","defaultNotifyOptions","shouldLoadOnMount","retryOnMount","shouldRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","QueriesObserver","observersMap","setQueries","onUpdate","updateObservers","getObserver","hasIndexChange","prevObservers","prevOberversMap","newResult","newObservers","newObserversMap","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","defaultContext","React","createContext","QueryClientSharingContext","getQueryClientContext","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","useContext","QueryClientProvider","children","useEffect","Context","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","QueryErrorResetBoundary","useMemo","useIsFetching","mountedRef","useRef","useState","setIsFetching","filtersRef","current","isFetchingRef","newIsFetching","useMutation","forceUpdate","obsRef","useCallback","useErrorBoundary","mutateAsync","useBaseQuery","Observer","errorResetBoundary","suspense","useQuery","useQueries","defaultedQueries","useInfiniteQuery"],"mappings":"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"}